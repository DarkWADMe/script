local Player = game:GetService("Players").LocalPlayer
local Character = Player.Character or Player.CharacterAdded:wait()
Player.CharacterAdded:Connect(function(Char) Character = Char end)
local ControlModule = require(Player:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ExitButton = Enum.KeyCode.F1
local Speed = 120
local Controls = {
	Toggle = {Running = {{Enum.KeyCode.L}, false}, Noclip = {{Enum.KeyCode.K}, true}, Slow = {{Enum.KeyCode.LeftControl}, false}},
	Up = {{Enum.KeyCode.Space, Enum.KeyCode.E}, false, Vector3.new(0, Speed, 0)},
	Down = {{Enum.KeyCode.Q}, false, Vector3.new(0, -Speed, 0)},
	Forward = {{Enum.KeyCode.W, Enum.KeyCode.Up}, false, Vector3.new(0, 0, -Speed)},
	Backward = {{Enum.KeyCode.S, Enum.KeyCode.Down}, false, Vector3.new(0, 0, Speed)},
	Left = {{Enum.KeyCode.A, Enum.KeyCode.Left}, false, Vector3.new(-Speed, 0, 0)},
	Right = {{Enum.KeyCode.D, Enum.KeyCode.Right}, false, Vector3.new(Speed, 0, 0)}
}
local Connections = {}
Connections.Loop = RunService.RenderStepped:Connect(function(Delta)
	if not Controls.Toggle.Running[2] then EndFlying() return end
	if not Character then EndFlying() return end
	if not Character.PrimaryPart then EndFlying() return end
	ControlModule:Disable()
	Character:WaitForChild("Humanoid").PlatformStand = true
	if Controls.Toggle.Noclip[2] then
		Character.PrimaryPart.Anchored = true
		workspace.Gravity = 196.2
	else
		for i, v in pairs(Character:GetDescendants()) do if v:IsA("BasePart") then v.Velocity = Vector3.new(0, 0, 0) end end
		workspace.Gravity = 0
		Character.PrimaryPart.Anchored = false
	end
	Character:SetPrimaryPartCFrame(CFrame.new(Character.PrimaryPart.Position, workspace.CurrentCamera.CFrame.p) * CFrame.Angles(0, math.pi, 0))
	if Controls.Toggle.Slow[2] then
		for i, v in pairs(Controls) do if v ~= Controls.Toggle then if v[2] then Character:SetPrimaryPartCFrame(Character.PrimaryPart.CFrame * CFrame.new(v[3] * Vector3.new(Delta, Delta, Delta) * Vector3.new(0.2, 0.2, 0.2))) end end end
	else
		for i, v in pairs(Controls) do if v ~= Controls.Toggle then if v[2] then Character:SetPrimaryPartCFrame(Character.PrimaryPart.CFrame * CFrame.new(v[3] * Vector3.new(Delta, Delta, Delta))) end end end
	end
end)
Connections.Began = UIS.InputBegan:Connect(function(Input, IsTyping)
	if IsTyping then return end
	if Input.KeyCode == ExitButton then DestroyScript() return end
	for i, v in pairs(Controls.Toggle) do for j, b in pairs(v[1]) do if Input.KeyCode == b then v[2] = not v[2] end end end
	for i, v in pairs(Controls) do if v ~= Controls.Toggle then for j, b in pairs(v[1]) do if Input.KeyCode == b then v[2] = true end end end end
end)
Connections.Ended = UIS.InputEnded:Connect(function(Input, IsTyping)
	if IsTyping then return end
	if Input.KeyCode == ExitButton then DestroyScript() return end
	for i, v in pairs(Controls) do if v ~= Controls.Toggle then for j, b in pairs(v[1]) do if Input.KeyCode == b then v[2] = false end end end end
end)
function EndFlying()
	Controls.Toggle.Running[2] = false
	Character.PrimaryPart.Anchored = false
	ControlModule:Enable()
	workspace.Gravity = 196.2
	Character:WaitForChild("Humanoid").PlatformStand = false
end
function DestroyScript()
	for i, v in pairs(Connections) do v:Disconnect() end
	EndFlying()
	script:Destroy()
end
